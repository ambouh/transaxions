{"version":3,"sources":["whitelogo.svg","Dashboard/UserNavigation/index.js","Dashboard/AllTransactions/index.js","Dashboard/Summary/index.js","Dashboard/index.js","auth.js","Login/index.js","Register/index.js","WelcomeScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserNavigation","react_default","a","createElement","className","react_router_dom","to","Component","AllTransactions","title","this","Summary","Dashboard","Dashboard_UserNavigation","react_router","exact","path","component","auth","Auth","Object","classCallCheck","authenticated","callback","Login","user","username","password","_this2","value","onClick","login","props","history","push","Register","WelcomeScreen","App","id","src","logo","alt","src_WelcomeScreen","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2328ac3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/whitelogo.157efa52.svg\";","import React, { Component } from 'react';\r\nimport './UserNavigation.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass UserNavigation extends Component {\r\n    render() {\r\n        return(\r\n          <div className={\"navigation\"}>\r\n              <ul>\r\n                  <li><Link to={\"/dashboard\"}>Dashboard</Link></li>\r\n                  <li><Link to={\"/dashboard/transactions\"}>All Transactions</Link></li>\r\n              </ul>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserNavigation;","import React, { Component} from 'react';\r\nimport './alltransactions.css';\r\n\r\nclass AllTransactions extends Component {\r\n    title = \"All Transaction\";\r\n    render() {\r\n        return (\r\n            <div className=\"templateDiv\">\r\n                <h1 className={\"templateTitle\"}>{this.title}</h1>\r\n                <p className={\"templateText\"}>This is the {this.title} template</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AllTransactions;","import React, { Component} from 'react';\r\nimport './summary.css';\r\nimport AllTransactions from \"../AllTransactions\";\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\n\r\nclass Summary extends Component {\r\n    title = \"Dashboard\";\r\n    render() {\r\n        return (\r\n            <div className=\"templateDiv\">\r\n                <h1 className={\"templateTitle\"}>{this.title}</h1>\r\n                <p className={\"templateText\"}>This is the {this.title} template</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Summary;","import React, { Component } from 'react';\r\nimport './dashboard.css';\r\nimport UserNavigation from \"./UserNavigation\";\r\nimport {Link, Switch, Route} from 'react-router-dom';\r\nimport Summary from \"./Summary\";\r\nimport AllTransactions from \"./AllTransactions\";\r\n\r\n\r\nclass Dashboard extends Component {\r\n    title = \"dashboard\";\r\n    render() {\r\n        return (\r\n            <div className={\"wrapper\"}>\r\n                <UserNavigation/>\r\n                <Switch>\r\n                    <Route exact path={\"/dashboard\"} component={Summary}/>\r\n                    <Route path={\"/dashboard/transactions\"} component={AllTransactions}/>\r\n                </Switch>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;","class Auth {\r\n    constructor(){\r\n        this.authenticated = false;\r\n    }\r\n\r\n    login(callback) {\r\n        this.authenticated = true;\r\n        callback();\r\n    }\r\n\r\n    logout(callback) {\r\n        this.authenticated = false;\r\n        callback();\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return this.authenticated;\r\n    }\r\n}\r\n\r\nexport default new Auth();","import React, { Component} from 'react' ;\r\nimport './login.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Dashboard from '../Dashboard';\r\nimport auth from '../auth';\r\n\r\nclass Login extends Component {\r\n    user = {\r\n        username: \"randomUser\",\r\n        password: \"password\"\r\n    };\r\n\r\n    /*handleClick = (props) => {\r\n        auth.login((props)=>{\r\n            props.history.push(\"/dashboard\");\r\n        })\r\n    };*/\r\n\r\n    render(){\r\n        return(\r\n            <div className={\"welcomeScreen\"}>\r\n                <form>\r\n                    <input value={this.user.username} />\r\n                    <input value={this.user.password} />\r\n                    <button className={\"button\"} onClick={()=>{\r\n                        auth.login(()=>{\r\n                            this.props.history.push(\"/dashboard\");\r\n                        });\r\n                    }}>Sign In</button>\r\n                    <Link to=\"/register\">\r\n                        <button className={\"button signUp\"}>Sign Up</button>\r\n                    </Link>\r\n                </form>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport './register.css';\r\n\r\nclass Register extends Component {\r\n    title = \"register\";\r\n    render() {\r\n        return (\r\n            <div className=\"templateDiv\">\r\n                <h1 className={\"templateTitle\"}>{this.title}</h1>\r\n                <p className={\"templateText\"}>This is the {this.title} template</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react';\r\nimport './welcomeScreen.css';\r\nimport Login from '../Login';\r\nimport Register from '../Register';\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\r\nimport Dashboard from \"../Dashboard\";\r\n\r\nclass WelcomeScreen extends Component {\r\n    render() {\r\n        return (\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Login}/>\r\n                    <Route path=\"/register\" component={Register}/>\r\n                    <Route path=\"/dashboard\" component={Dashboard}/>\r\n                </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WelcomeScreen;","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard/';\nimport logo from './whitelogo.svg';\nimport WelcomeScreen from './WelcomeScreen/';\n\n\n\nclass App extends Component {\n\n    render() {\n    return (\n        <div id=\"container\">\n            <div className=\"upperDiv\">\n                <img src={logo} className=\"logo\" alt=\"Transaxions Logo\" />\n            </div>\n            <div className=\"midDiv\">\n                <WelcomeScreen/>\n            </div>\n            <div className=\"bottomDiv\">\n                <p>Copyright 2019 Transaxions | World's Greatest Ledger App</p>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nrender((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}